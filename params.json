{"name":"Bumpkit","tagline":"","body":"# Bumpkit\r\nA DAW-inpsired library for the Web Audio API\r\n\r\n*Work in Progress*\r\n\r\n\r\n---\r\n\r\n\r\n# Getting Started\r\n\r\nInclude the `dist/bumpkit.min.js` file in your project.\r\n\r\nIn your application, create a new instance of the Bumpkit class:\r\n\r\n```js\r\nvar bumpkit = new Bumpkit();\r\n```\r\n\r\nThis will create a new Audio Context instance with custom methods and properties.\r\n\r\n\r\n---\r\n\r\n\r\n# Basics\r\n\r\n## Create a mixer with two tracks\r\n\r\n```js\r\nvar mixer = bumpkit.createMixer().addTrack().addTrack();\r\n```\r\n\r\n## Create a new Sampler instrument and load an audio buffer\r\n\r\n```js\r\nvar sampler = bumpkit.createSampler().connect(mixer.tracks[0]);\r\n\r\nbumpkit.loadBuffer('/audio/clap.mp3', function(buffer) {\r\n  sampler.buffer(buffer);\r\n});\r\n```\r\n\r\n---\r\n\r\n\r\n# API Documentation\r\n\r\n## Bumpkit Class\r\nExtends the AudioContext with additional properties and methods. Create a new instance: `var bumpkit = new Bumpkit()`\r\n\r\n### Custom Properties\r\n#### `.buffers`\r\nAn object for storing arrayBuffers. Keys are based on url. E.g. `{ /audio/sound.mp3: AudioBuffer }`\r\n\r\n#### `.isPlaying`\r\nBoolean value for if the step sequencer is running.\r\n\r\n#### `.loopLength`\r\nInteger representing the number of steps in a loop. Defaults to `null`.\r\n\r\n#### `.stepResolution`\r\n*Placeholder*\r\nInteger representing the number of steps in a bar. Currently hard-coded to `16`.\r\n\r\n#### `.tempo`\r\nInteger representing the tempo of the step sequencer. Defaults to `120`.\r\n\r\n#### `.timeSignature`\r\n*Placeholder*\r\nArray of two integers representing the time signature. 4/4 is represented as `[4,4]`. Currently hard-coded to 4/4.\r\n\r\n### Custom Methods\r\n#### `.loadBuffer(url, callback)`\r\n*(Chainable)*\r\nMakes an arraybuffer XHR request, decodes the file, stores the buffer in the `.buffers` object, and returns a Web Audio buffer.\r\nIf called a second time for the same url, it will return the stored buffer.\r\n\r\n#### `.playPause()`\r\n*(Chainable)*\r\nToggles playing of the step sequencer. The current step always begins at 0 when playing.\r\n\r\n#### `.trigger(source, options)`\r\n*(Chainable)*\r\nCalls the `.start` method on the source. Options is an object with properties `when`, `offset`, and `duration`. The source should be connected to its destination before calling `.trigger()`.\r\n\r\n\r\n---\r\n\r\n\r\n## Mixer Object\r\nUse the `.createMixer()` method to create a new mixer instance.\r\nE.g. `var mixer = bumpkit.createMixer()`\r\nThe mixer is an object of tracks.\r\nBy default it includes a `.master` track object that is connected to the Bumpkit instances `.destination`.\r\n\r\n### Mixer Methods\r\n#### `.addTrack()`\r\n*(Chainable)*\r\nCreates a new track instance, adds it to the mixer tracks array, and connects it to the master track.\r\n\r\n#### `.removeTrack(index)`\r\n*(Chainable)*\r\nRemoves a track from the mixer tracks array at `index`.\r\n\r\n### Mixer Track Properties\r\nEach mixer track is a Web Audio gain node and can be directly connected to.\r\nTracks also include additional gain nodes for routing.\r\n\r\n#### `.mute`\r\nUse this gain node to read whether or not a track is muted. The track's volume state is maintained in the `.volume` gain node.\r\n\r\n#### `.volume`\r\nGet or set the volume for the track using this node. The volume node is also used to connect to other destinations.\r\nGet the volume: `var level = track.volume,gain`\r\nSet the volume: `track.volume.gain.value = .5`\r\n*NOTE: This might change to a getter/setter method*\r\n\r\n#### `.effectsNode`\r\nA dummy gain node for connecting audio effects.\r\n\r\n#### `.effects`\r\nAn array of other Web Audio nodes that can be placed between the root track node and the `.mute` node.\r\n\r\n### Mixer Track Methods\r\n#### `.addEffect(node, index)`\r\n*(Chainable)*\r\nAdds a node to the track effects array, and handles connections. By default, each effect is added to the end of the array. Use the `index` argument to adjust the insertion point.\r\n\r\n#### `.removeEffect(index)`\r\n*(Chainable)*\r\nRemoves `.effects[index]` from the array and reconnects the nodes.\r\n\r\n#### `.connect(node)`\r\n*(Chainable)*\r\nConnects the `.volume` node to a destination. This handles the web audio `.disconnect(0)` call as well.\r\n\r\n#### `.toggleMute()`\r\n*(Chainable)*\r\nToggles the track's `.mute` node between 1 and 0.\r\n\r\n#### `.updateConnections()`\r\n*(Chainable)*\r\nDisconnects and reconnects effects in the `.effects` array. This is used by the `.addEffect()` and `.removeEffect()` methods, but should also be called after manually reordering the effects array.\r\n\r\n\r\n---\r\n\r\n\r\n## Clip Object\r\nClips listen to Bumpkit's sequencer `step` event and triggers playback of instruments based on patterns.\r\nUsage: `var clip = bumpkit.createClip()`\r\n\r\n### Clip Properties\r\n#### `.pattern`\r\nAn binary integer array to trigger playback of the connected instrument according to a rhythmic pattern.\r\nThe clip listens to the `step` event emitted by the Bumpkit clock sequencer.\r\nE.g. `clip.pattern = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0]` will play on each quarter note.\r\nIn the future, patterns will support more complex object arrays to account for velocity, duration, offset, envelopes, etc.\r\n\r\n#### `.active`\r\nBoolean for whether or not the clip should trigger playback.\r\n\r\n### Clip Methods\r\n#### `.connect(node)`\r\n*(Chainable)*\r\nConnects the clip to an instrument. The instrument must have a `.play(when)` method that accepts a when argument.\r\n\r\n#### `.toggle()`\r\n*(Chainable)*\r\nToggles the `.active` attribute for the clip.\r\n\r\n#### `.play(when)`\r\n*(Chainable)*\r\nUsed within the object to trigger playback from the event listener. This can be used manually, but it's prefered to manually call `.play()` directly on instruments if not using a clip.\r\n\r\n\r\n---\r\n\r\n\r\n## Beep Object\r\nA simple sine-wave oscillator instrument.\r\nUsage `var beep = bumpkit.createBeep()`\r\n\r\n### `.createBeep(options)`\r\nReturns a new Beep instance. Pass an optional argument to set property defaults.\r\nE.g. `var customBeep = bumpkit.createBeep({ duration: .5, frequency: 512, connect: mixer.master })`\r\n\r\n### Beep Properties\r\n#### `.duration`\r\nAn integer of the length in seconds that the Beep will sound.\r\n\r\n### Beep Methods\r\n#### `.frequency(frequency)`\r\n*Getter/Setter (Chainable Setter)*\r\nChanges the frequency of the instrument. E.g. Set the frequency: `beep.frequency(512)` or get the frequency: `var f = beep.frequency()`\r\n\r\n#### `.connect(node)`\r\n*(Chainable)*\r\nConnects the Beep to a destination node.\r\n\r\n#### `.play(when)`\r\n*(Chainable)*\r\nPlays the instrument at the given `when` argument. If no argument is passed, the Beep will play immediately.\r\n\r\n\r\n---\r\n\r\n\r\n## Sampler Object\r\nA simple sampler instrument for playing audio buffers.\r\nUsage `var sampler = bumpkit.createSampler()`\r\n\r\n### `.createSampler(options)`\r\nReturns a new Sampler instance. Pass an optional argument to set property defaults.\r\nE.g. `var customSampler = bumpkit.createSampler({ buffer: AudioBuffer, duration: .5, offset: .1, connect: mixer.master })`\r\n\r\n### Sampler Properties\r\n#### `.offset`\r\nA number representing the offset in seconds to start playback of the sample. Defaults to 0.\r\n\r\n#### `.duration`\r\nA number representing the duration to play the sample. Defaults to 0.6.\r\n\r\n### Sampler Methods\r\n#### `.buffer(buffer)`\r\n*Getter/Setter (Chainable Setter)*\r\nGets or sets the audio buffer used for the sampler. E.g. set the buffer: `sampler.buffer(AudioBuffer)` or get the buffer: `var b = sampler.buffer()`\r\n\r\n#### `.connect(node)`\r\n*(Chainable)*\r\nConnects the sampler to a destination node.\r\n\r\n#### `.play(when)`\r\n*(Chainable)*\r\n\r\n\r\n---\r\n\r\n\r\n## Analysers\r\n\r\n### `.createAmplitudeAnalyser`\r\n*Work in Progress*\r\nCreates a Web Audio analyser node with a custom method for reading the amplitude of a signal.\r\n\r\n---\r\n\r\n\r\n## Peak Analyser\r\n### `.analysePeaks(buffer)`\r\nReturns a Float32Array representing waveform data for the buffer.\r\nUsage: `var waveform = bumpkit.analysePeaks(AudioBuffer)`\r\n\r\n\r\n---\r\n\r\n\r\n## Edge Fader\r\n### `.createEdgeFader(options)`\r\nUsed internally to return a Web Audio gain node with edges faded according to the options argument.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}